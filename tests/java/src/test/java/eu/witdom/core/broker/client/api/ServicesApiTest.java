/**
 * WITDOM Broker API
 * API to use services from the Broker
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package eu.witdom.core.broker.client.api;

import eu.witdom.core.broker.client.ApiClient;
import eu.witdom.core.broker.client.ApiException;
import eu.witdom.core.broker.client.model.Service;
import eu.witdom.core.broker.client.model.Error;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
public class ServicesApiTest {

    String basePath = "http://localhost:5000/v1";
    private ApiClient client = new ApiClient().setBasePath(basePath);
    private final ServicesApi api = new ServicesApi(client);

    
    /**
     * Details like location of a specific services
     *
     * With this request the client can get the details of the service identified by the given service  name, if exists.  This method can be accessed by client apps and internal services or even by the broker on  the other domain, so both a valid certificate and a valid token can be used to get access authorization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceDetailsGETTest() throws ApiException {

        String user = "string";        
        String token = "string";
        String service = "service_id";

        Service response = api.serviceDetailsGET(service, user, token);

        // TODO: test validations
    }
    
    /**
     * List of services available in the domain
     *
     * This lists all the services located in the asked boker&#39;s domain and their data.  As the \\\&quot;/service/details\\\&quot; method, it accepts both a valid certificate and a valid token to grant access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceDomainlistGETTest() throws ApiException {
        
        String user = "string";
        String token = "string";

        List<Service> response = api.serviceDomainlistGET(user, token);

        // TODO: test validations
    }
    
    /**
     * List of services available in WITDOM
     *
     * This lists all the services deployed in the WITDOM domains and their data.  As the other service methods, it accepts both a valid certificate and a valid token to grant access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceListGETTest() throws ApiException {
        
        String user = "string";
        String token = "string";

        List<Service> response = api.serviceListGET(user, token);

        // TODO: test validations
    }
    
    /**
     * Time Estimates
     *
     * This lists all the services located outside the asked broker&#39;s domain and their data.  Like the other service methods, it accepts both a valid certificate and a valid token to grant access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceOutsidelistGETTest() throws ApiException {
        
        String user = "string";
        String token = "string";

        List<Service> response = api.serviceOutsidelistGET(user, token);

        // TODO: test validations
    }
    
}
