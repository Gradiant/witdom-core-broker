/**
 * WITDOM Broker API
 * API to use services from the Broker
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package eu.witdom.core.broker.client.api;

import eu.witdom.core.broker.client.ApiClient;
import eu.witdom.core.broker.client.ApiException;
import eu.witdom.core.broker.client.model.Request;
import eu.witdom.core.broker.client.model.Error;
import eu.witdom.core.broker.client.model.Result;
import java.math.BigDecimal;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.Objects;

/**
 * API tests for RequestApi
 */
public class RequestApiTest {

    String basePath = "http://localhost:5000/v1";
    private ApiClient client = new ApiClient().setBasePath(basePath);
    private final RequestApi api = new RequestApi(client);

    
    /**
     * Forwards a request to a service or module in a blocking manner
     *
     * The creation of a request just sends the request to the target service or module and blocks the return until available results 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCreateBlockerPOSTTest() throws ApiException {

        Request request = new Request();

        request.setServiceName("string");

        request.setRequestType("string");

        request.setRequestUri("string");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("data", "String");
        request.setRequestData(objectNode);

        Result response = api.requestCreateBlockerPOST(request);

        // TODO: test validations
    }
    
    /**
     * Forwarding a request to a service or module
     *
     * The creation of a request just sends the request to the target service or module 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCreatePOSTTest() throws ApiException {
        
        Request request = new Request();

        request.setServiceName("string");

        request.setRequestType("string");

        request.setRequestUri("string");

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("data", "String");
        request.setRequestData(objectNode);

        BigDecimal response = api.requestCreatePOST(request);

        // TODO: test validations
    }
    
    /**
     * Try to get the result of a previous request if available
     *
     * If the request_id is finished then returns the result if not returns an error. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestGetresultGETTest() throws ApiException {

        String user = "string";
        String token = "string";
        String requestId = "string";

        Result response = api.requestGetresultGET(user, token, requestId);

        // TODO: test validations
    }
    
    /**
     * Update a request
     *
     * The forward requests just send the request 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestUpdatePOSTTest() throws ApiException {

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode objectNode = mapper.createObjectNode();
        objectNode.put("data", "String");
        Result result = new Result().resultData(objectNode);

        String requestId = "string";

        Result response = api.requestUpdatePOST(result, requestId);

        // TODO: test validations
    }
    
}
